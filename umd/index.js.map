{"version":3,"file":"index.js","sources":["../src/IntersectionUtilities.js","../src/GeometryUtilities.js","../src/BoundsUtilities.js","../src/MeshBVHNode.js","../src/Constants.js","../src/BVHConstructionContext.js","../src/MeshBVH.js","../src/MeshBVHVisualizer.js","../src/index.js"],"sourcesContent":["import { Vector3, Vector2, Triangle, DoubleSide, BackSide, Face3 } from 'three';\n\n// From THREE.js Mesh raycast\nvar vA = new Vector3();\nvar vB = new Vector3();\nvar vC = new Vector3();\n\nvar uvA = new Vector2();\nvar uvB = new Vector2();\nvar uvC = new Vector2();\n\nvar barycoord = new Vector3();\nvar intersectionPoint = new Vector3();\nvar intersectionPointWorld = new Vector3();\n\nfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\tuv1.multiplyScalar( barycoord.x );\n\tuv2.multiplyScalar( barycoord.y );\n\tuv3.multiplyScalar( barycoord.z );\n\n\tuv1.add( uv2 ).add( uv3 );\n\n\treturn uv1.clone();\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tvar intersect;\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tintersectionPointWorld.copy( point );\n\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\tvA.fromBufferAttribute( position, a );\n\tvB.fromBufferAttribute( position, b );\n\tvC.fromBufferAttribute( position, c );\n\n\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t}\n\n\t\tvar normal = new Vector3();\n\t\tintersection.face = new Face3( a, b, c, Triangle.getNormal( vA, vB, vC, normal ) );\n\t\tintersection.faceIndex = a;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { uvIntersection, checkIntersection, checkBufferGeometryIntersection };\n","import { checkBufferGeometryIntersection } from './IntersectionUtilities.js';\r\n\r\n// For BVH code specifically. Does not check morph targets\r\n// Copied from mesh raycasting\r\n// Ripped an modified from the THREE.js source in Mesh.CS\r\nconst intersectTri = ( mesh, geo, raycaster, ray, tri, intersections ) => {\r\n\r\n\tconst triOffset = tri * 3;\r\n\tconst a = geo.index.getX( triOffset );\r\n\tconst b = geo.index.getX( triOffset + 1 );\r\n\tconst c = geo.index.getX( triOffset + 2 );\r\n\r\n\tconst intersection = checkBufferGeometryIntersection( mesh, raycaster, ray, geo.attributes.position, geo.attributes.uv, a, b, c );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tintersection.faceIndex = tri;\r\n\t\tif ( intersections ) intersections.push( intersection );\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nconst intersectTris = ( mesh, geo, raycaster, ray, offset, count, intersections ) => {\r\n\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tintersectTri( mesh, geo, raycaster, ray, i, intersections );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst intersectClosestTri = ( mesh, geo, raycaster, ray, offset, count ) => {\r\n\r\n\tlet dist = Infinity;\r\n\tlet res = null;\r\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\tconst intersection = intersectTri( mesh, geo, raycaster, ray, i );\r\n\t\tif ( intersection && intersection.distance < dist ) {\r\n\r\n\t\t\tres = intersection;\r\n\t\t\tdist = intersection.distance;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn res;\r\n\r\n};\r\n\r\nexport {\r\n\tintersectTri, intersectTris, intersectClosestTri\r\n};\r\n","// Returns a Float32Array representing the bounds data for box.\r\nfunction boundsToArray( bx ) {\r\n\r\n\tconst arr = new Float32Array( 6 );\r\n\r\n\tarr[ 0 ] = bx.min.x;\r\n\tarr[ 1 ] = bx.min.y;\r\n\tarr[ 2 ] = bx.min.z;\r\n\r\n\tarr[ 3 ] = bx.max.x;\r\n\tarr[ 4 ] = bx.max.y;\r\n\tarr[ 5 ] = bx.max.z;\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\nfunction arrayToBox( arr, target ) {\r\n\r\n\ttarget.min.x = arr[ 0 ];\r\n\ttarget.min.y = arr[ 1 ];\r\n\ttarget.min.z = arr[ 2 ];\r\n\r\n\ttarget.max.x = arr[ 3 ];\r\n\ttarget.max.y = arr[ 4 ];\r\n\ttarget.max.z = arr[ 5 ];\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nfunction getLongestEdgeIndex( bounds ) {\r\n\r\n\tlet splitDimIdx = - 1;\r\n\tlet splitDist = - Infinity;\r\n\r\n\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\r\n\t\tif ( dist > splitDist ) {\r\n\r\n\t\t\tsplitDist = dist;\r\n\t\t\tsplitDimIdx = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitDimIdx;\r\n\r\n}\r\n\r\nexport { boundsToArray, arrayToBox, getLongestEdgeIndex };\r\n","\r\nimport * as THREE from 'three';\r\nimport { intersectTris, intersectClosestTri } from './GeometryUtilities.js';\r\nimport { arrayToBox } from './BoundsUtilities.js';\r\n\r\nconst boundingBox = new THREE.Box3();\r\nconst boxIntersection = new THREE.Vector3();\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\nexport default\r\nclass MeshBVHNode {\r\n\r\n\tconstructor() {\r\n\r\n\t\t// internal nodes have boundingData, left, right, and splitAxis\r\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\r\n\r\n\t}\r\n\r\n\tintersectRay( ray, target ) {\r\n\r\n\t\tarrayToBox( this.boundingData, boundingBox );\r\n\r\n\t\treturn ray.intersectBox( boundingBox, target );\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tif ( this.count ) intersectTris( mesh, mesh.geometry, raycaster, ray, this.offset, this.count, intersects );\r\n\t\telse {\r\n\r\n\t\t\tif ( this.left.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.left.raycast( mesh, raycaster, ray, intersects );\r\n\t\t\tif ( this.right.intersectRay( ray, boxIntersection ) )\r\n\t\t\t\tthis.right.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tif ( this.count ) {\r\n\r\n\t\t\treturn intersectClosestTri( mesh, mesh.geometry, raycaster, ray, this.offset, this.count );\r\n\r\n\t\t} else {\r\n\r\n\r\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\r\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\r\n\t\t\tconst splitAxis = this.splitAxis;\r\n\t\t\tconst xyzAxis = xyzFields[ splitAxis ];\r\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\r\n\t\t\tconst leftToRight = rayDir >= 0;\r\n\r\n\t\t\t// c1 is the child to check first\r\n\t\t\tlet c1, c2;\r\n\t\t\tif ( leftToRight ) {\r\n\r\n\t\t\t\tc1 = this.left;\r\n\t\t\t\tc2 = this.right;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tc1 = this.right;\r\n\t\t\t\tc2 = this.left;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst c1Intersection = c1.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c1Result = c1Intersection ? c1.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\r\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\r\n\t\t\tif ( c1Result ) {\r\n\r\n\t\t\t\t// check only along the split axis\r\n\t\t\t\tconst rayOrig = ray.origin[ xyzAxis ];\r\n\t\t\t\tconst toPoint = rayOrig - c1Result.point[ xyzAxis ];\r\n\t\t\t\tconst toChild1 = rayOrig - c2.boundingData[ splitAxis ];\r\n\t\t\t\tconst toChild2 = rayOrig - c2.boundingData[ splitAxis + 3 ];\r\n\r\n\t\t\t\tconst toPointSq = toPoint * toPoint;\r\n\t\t\t\tif ( toPointSq <= toChild1 * toChild1 && toPointSq <= toChild2 * toChild2 ) {\r\n\r\n\t\t\t\t\treturn c1Result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\r\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\r\n\t\t\tconst c2Intersection = c2.intersectRay( ray, boxIntersection );\r\n\t\t\tconst c2Result = c2Intersection ? c2.raycastFirst( mesh, raycaster, ray ) : null;\r\n\r\n\t\t\tif ( c1Result && c2Result ) {\r\n\r\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn c1Result || c2Result || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","// Split strategy constants\r\nexport const CENTER = 0;\r\nexport const AVERAGE = 1;\r\nexport const SAH = 2;\r\n","import * as THREE from 'three';\r\nimport { arrayToBox, getLongestEdgeIndex } from './BoundsUtilities.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst xyzFields = [ 'x', 'y', 'z' ];\r\n\r\n// precomputes data about each triangle required for quickly calculating tree splits:\r\n//\r\n// - bounds: an array of size tris.length * 6 where triangle i maps to a\r\n//   [x_min, x_max, y_min, y_max, z_min, z_max] tuple starting at index i * 6,\r\n//   representing the minimum and maximum extent in each dimension of triangle i\r\n//\r\n// - centroids: an array of size tris.length * 3 where triangle i maps to an [x, y, z] triplet\r\n//   starting at index i * 3, representing the centroid of triangle i\r\n//\r\nfunction computeTriangleData( geo ) {\r\n\r\n\tconst verts = geo.attributes.position.array;\r\n\tconst index = geo.index.array;\r\n\tconst triCount = index.length / 3;\r\n\tconst bounds = new Float32Array( triCount * 6 );\r\n\tconst centroids = new Float32Array( triCount * 3 );\r\n\r\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\tconst ai = index[ 3 * tri + 0 ] * 3;\r\n\t\tconst bi = index[ 3 * tri + 1 ] * 3;\r\n\t\tconst ci = index[ 3 * tri + 2 ] * 3;\r\n\r\n\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\tconst a = verts[ ai + el ];\r\n\t\t\tconst b = verts[ bi + el ];\r\n\t\t\tconst c = verts[ ci + el ];\r\n\t\t\tbounds[ tri * 6 + el * 2 + 0 ] = Math.min( a, b, c );\r\n\t\t\tbounds[ tri * 6 + el * 2 + 1 ] = Math.max( a, b, c );\r\n\t\t\tcentroids[ tri * 3 + el ] = ( a + b + c ) / 3;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { bounds, centroids };\r\n\r\n}\r\n\r\nconst boxtemp = new THREE.Box3();\r\n\r\nexport default class BVHConstructionContext {\r\n\r\n\tconstructor( geo, options ) {\r\n\r\n\t\tthis.geo = geo;\r\n\t\tthis.options = options;\r\n\r\n\t\tconst data = computeTriangleData( geo );\r\n\t\tthis.centroids = data.centroids;\r\n\t\tthis.bounds = data.bounds;\r\n\r\n\t\t// SAH Initialization\r\n\t\tthis.sahplanes = null;\r\n\t\tif ( options.strategy === SAH ) {\r\n\r\n\t\t\tconst triCount = geo.index.count / 3;\r\n\t\t\tthis.sahplanes = [ new Array( triCount ), new Array( triCount ), new Array( triCount ) ];\r\n\t\t\tfor ( let tri = 0; tri < triCount; tri ++ ) {\r\n\r\n\t\t\t\tfor ( let el = 0; el < 3; el ++ ) {\r\n\r\n\t\t\t\t\tthis.sahplanes[ el ][ tri ] = { p: this.centroids[ tri * 3 + el ], tri };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// returns the average coordinate on the specified axis of the all the provided triangles\r\n\tgetAverage( offset, count, axis ) {\r\n\r\n\t\tlet avg = 0;\r\n\t\tconst centroids = this.centroids;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tavg += centroids[ i * 3 + axis ];\r\n\r\n\t\t}\r\n\r\n\t\treturn avg / count;\r\n\r\n\t}\r\n\r\n\t// computes the union of the bounds of all of the given triangles and puts the resulting box in target\r\n\tgetBounds( offset, count, target ) {\r\n\r\n\t\tlet minx = Infinity;\r\n\t\tlet miny = Infinity;\r\n\t\tlet minz = Infinity;\r\n\t\tlet maxx = - Infinity;\r\n\t\tlet maxy = - Infinity;\r\n\t\tlet maxz = - Infinity;\r\n\t\tconst bounds = this.bounds;\r\n\r\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\tminx = Math.min( minx, bounds[ i * 6 + 0 ] );\r\n\t\t\tmaxx = Math.max( maxx, bounds[ i * 6 + 1 ] );\r\n\t\t\tminy = Math.min( miny, bounds[ i * 6 + 2 ] );\r\n\t\t\tmaxy = Math.max( maxy, bounds[ i * 6 + 3 ] );\r\n\t\t\tminz = Math.min( minz, bounds[ i * 6 + 4 ] );\r\n\t\t\tmaxz = Math.max( maxz, bounds[ i * 6 + 5 ] );\r\n\r\n\t\t}\r\n\r\n\t\ttarget[ 0 ] = minx;\r\n\t\ttarget[ 1 ] = miny;\r\n\t\ttarget[ 2 ] = minz;\r\n\r\n\t\ttarget[ 3 ] = maxx;\r\n\t\ttarget[ 4 ] = maxy;\r\n\t\ttarget[ 5 ] = maxz;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\r\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\r\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\r\n\tpartition( offset, count, split ) {\r\n\r\n\t\tlet left = offset;\r\n\t\tlet right = offset + count - 1;\r\n\t\tconst pos = split.pos;\r\n\t\tconst axis = split.axis;\r\n\t\tconst index = this.geo.index.array;\r\n\t\tconst centroids = this.centroids;\r\n\t\tconst bounds = this.bounds;\r\n\t\tconst sahplanes = this.sahplanes;\r\n\r\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\twhile ( true ) {\r\n\r\n\t\t\twhile ( left <= right && centroids[ left * 3 + axis ] < pos ) {\r\n\r\n\t\t\t\tleft ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( left <= right && centroids[ right * 3 + axis ] >= pos ) {\r\n\r\n\t\t\t\tright --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( left < right ) {\r\n\r\n\t\t\t\t// we need to swap all of the information associated with the triangles at index\r\n\t\t\t\t// left and right; that's the verts in the geometry index, the centroids, the bounds,\r\n\t\t\t\t// and perhaps the SAH planes\r\n\r\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tlet t0 = index[ left * 3 + i ];\r\n\t\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\r\n\t\t\t\t\tindex[ right * 3 + i ] = t0;\r\n\r\n\t\t\t\t\tlet t1 = centroids[ left * 3 + i ];\r\n\t\t\t\t\tcentroids[ left * 3 + i ] = centroids[ right * 3 + i ];\r\n\t\t\t\t\tcentroids[ right * 3 + i ] = t1;\r\n\r\n\t\t\t\t\tlet t2 = bounds[ left * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 0 ] = bounds[ right * 6 + i * 2 + 0 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 0 ] = t2;\r\n\t\t\t\t\tlet t3 = bounds[ left * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ left * 6 + i * 2 + 1 ] = bounds[ right * 6 + i * 2 + 1 ];\r\n\t\t\t\t\tbounds[ right * 6 + i * 2 + 1 ] = t3;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( sahplanes ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tlet t = sahplanes[ i ][ left ];\r\n\t\t\t\t\t\tsahplanes[ i ][ left ] = sahplanes[ i ][ right ];\r\n\t\t\t\t\t\tsahplanes[ i ][ right ] = t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tleft ++;\r\n\t\t\t\tright --;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn left;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetOptimalSplit( bounds, offset, count, strategy ) {\r\n\r\n\t\tlet axis = - 1;\r\n\t\tlet pos = 0;\r\n\r\n\t\t// Center\r\n\t\tif ( strategy === CENTER ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = ( bounds[ axis + 3 ] + bounds[ axis ] ) / 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === AVERAGE ) {\r\n\r\n\t\t\taxis = getLongestEdgeIndex( bounds );\r\n\t\t\tif ( axis !== - 1 ) {\r\n\r\n\t\t\t\tpos = this.getAverage( offset, count, axis );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( strategy === SAH ) {\r\n\r\n\t\t\t// Surface Area Heuristic\r\n\t\t\t// In order to make this code more terse, the x, y, and z\r\n\t\t\t// variables of various structures have been stuffed into\r\n\t\t\t// 0, 1, and 2 array indices so they can be easily computed\r\n\t\t\t// and accessed within array iteration\r\n\r\n\t\t\t// Cost values defineed for operations. We're using bounds for traversal, so\r\n\t\t\t// the cost of traversing one more layer is more than intersecting a triangle.\r\n\t\t\tconst TRAVERSAL_COST = 3;\r\n\t\t\tconst INTERSECTION_COST = 1;\r\n\t\t\tconst bb = arrayToBox( bounds, boxtemp );\r\n\r\n\t\t\t// Define the width, height, and depth of the bounds as a box\r\n\t\t\tconst dim = [\r\n\t\t\t\tbb.max.x - bb.min.x,\r\n\t\t\t\tbb.max.y - bb.min.y,\r\n\t\t\t\tbb.max.z - bb.min.z\r\n\t\t\t];\r\n\t\t\tconst sa = 2 * ( dim[ 0 ] * dim[ 1 ] + dim[ 0 ] * dim[ 2 ] + dim[ 1 ] * dim[ 2 ] );\r\n\r\n\t\t\t// Get the precalculated planes based for the triangles we're\r\n\t\t\t// testing here\r\n\t\t\tconst filteredLists = [[], [], []];\r\n\t\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\r\n\r\n\t\t\t\tfor ( let v = 0; v < 3; v ++ ) {\r\n\r\n\t\t\t\t\tfilteredLists[ v ].push( this.sahplanes[ v ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tfilteredLists.forEach( planes => planes.sort( ( a, b ) => a.p - b.p ) );\r\n\r\n\t\t\t// this bounds surface area, left bound SA, left triangles, right bound SA, right triangles\r\n\t\t\tconst getCost = ( sa, sal, nl, sar, nr ) =>\r\n\t\t\t\t  TRAVERSAL_COST + INTERSECTION_COST * ( ( sal / sa ) * nl + ( sar / sa ) * nr );\r\n\r\n\t\t\t// the cost of _not_ splitting into smaller bounds\r\n\t\t\tconst noSplitCost = INTERSECTION_COST * count;\r\n\r\n\t\t\taxis = - 1;\r\n\t\t\tlet bestCost = noSplitCost;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t// o1 and o2 represent the _other_ two axes in the\r\n\t\t\t\t// the space. So if we're checking the x (0) dimension,\r\n\t\t\t\t// then o1 and o2 would be y and z (1 and 2)\r\n\t\t\t\tconst o1 = ( i + 1 ) % 3;\r\n\t\t\t\tconst o2 = ( i + 2 ) % 3;\r\n\r\n\t\t\t\tconst bmin = bb.min[ xyzFields[ i ] ];\r\n\t\t\t\tconst bmax = bb.max[ xyzFields[ i ] ];\r\n\t\t\t\tconst planes = filteredLists[ i ];\r\n\r\n\t\t\t\t// The number of left and right triangles on either side\r\n\t\t\t\t// given the current split\r\n\t\t\t\tlet nl = 0;\r\n\t\t\t\tlet nr = count;\r\n\t\t\t\tfor ( let p = 0; p < planes.length; p ++ ) {\r\n\r\n\t\t\t\t\tconst pinfo = planes[ p ];\r\n\r\n\t\t\t\t\t// As the plane moves, we have to increment or decrement the\r\n\t\t\t\t\t// number of triangles on either side of the plane\r\n\t\t\t\t\tnl ++;\r\n\t\t\t\t\tnr --;\r\n\r\n\t\t\t\t\t// the distance from the plane to the edge of the broader bounds\r\n\t\t\t\t\tconst ldim = pinfo.p - bmin;\r\n\t\t\t\t\tconst rdim = bmax - pinfo.p;\r\n\r\n\t\t\t\t\t// same for the other two dimensions\r\n\t\t\t\t\tlet ldimo1 = dim[ o1 ], rdimo1 = dim[ o1 ];\r\n\t\t\t\t\tlet ldimo2 = dim[ o2 ], rdimo2 = dim[ o2 ];\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// compute the other bounding planes for the box\r\n\t\t\t\t\t// if only the current triangles are considered to\r\n\t\t\t\t\t// be in the box\r\n\t\t\t\t\t// This is really slow and probably not really worth it\r\n\t\t\t\t\tconst o1planes = this.sahplanes[o1];\r\n\t\t\t\t\tconst o2planes = this.sahplanes[o2];\r\n\t\t\t\t\tlet lmin = Infinity, lmax = -Infinity;\r\n\t\t\t\t\tlet rmin = Infinity, rmax = -Infinity;\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o1planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o1planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo1 = Math.min(lmax - lmin, ldimo1);\r\n\t\t\t\t\trdimo1 = Math.min(rmax - rmin, rdimo1);\r\n\r\n\t\t\t\t\tplanes.forEach((p, i) => {\r\n\t\t\t\t\tconst tri2 = p.tri * 2;\r\n\t\t\t\t\tconst inf1 = o2planes[tri2 + 0];\r\n\t\t\t\t\tconst inf2 = o2planes[tri2 + 1];\r\n\t\t\t\t\tif (i <= nl) {\r\n\t\t\t\t\tlmin = Math.min(inf1.p, inf2.p, lmin);\r\n\t\t\t\t\tlmax = Math.max(inf1.p, inf2.p, lmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i >= nr) {\r\n\t\t\t\t\trmin = Math.min(inf1.p, inf2.p, rmin);\r\n\t\t\t\t\trmax = Math.max(inf1.p, inf2.p, rmax);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tldimo2 = Math.min(lmax - lmin, ldimo2);\r\n\t\t\t\t\trdimo2 = Math.min(rmax - rmin, rdimo2);\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// surface areas and cost\r\n\t\t\t\t\tconst sal = 2 * ( ldimo1 * ldimo2 + ldimo1 * ldim + ldimo2 * ldim );\r\n\t\t\t\t\tconst sar = 2 * ( rdimo1 * rdimo2 + rdimo1 * rdim + rdimo2 * rdim );\r\n\t\t\t\t\tconst cost = getCost( sa, sal, nl, sar, nr );\r\n\r\n\t\t\t\t\tif ( cost < bestCost ) {\r\n\r\n\t\t\t\t\t\taxis = i;\r\n\t\t\t\t\t\tpos = pinfo.p;\r\n\t\t\t\t\t\tbestCost = cost;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { axis, pos };\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport MeshBVHNode from './MeshBVHNode.js';\r\nimport BVHConstructionContext from './BVHConstructionContext.js';\r\nimport { CENTER } from './Constants.js';\r\n\r\nexport default class MeshBVH {\r\n\r\n\tconstructor( geo, options = {} ) {\r\n\r\n\t\tif ( ! geo.isBufferGeometry ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\r\n\r\n\t\t} else if ( geo.attributes.position.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the position attribute.' );\r\n\r\n\t\t} else if ( geo.index && geo.index.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\r\n\r\n\t\t}\r\n\r\n\t\t// default options\r\n\t\toptions = Object.assign( {\r\n\r\n\t\t\tstrategy: CENTER,\r\n\t\t\tmaxDepth: 40,\r\n\t\t\tmaxLeafTris: 10,\r\n\t\t\tverbose: true\r\n\r\n\t\t}, options );\r\n\t\toptions.strategy = Math.max( 0, Math.min( 2, options.strategy ) );\r\n\r\n\t\tthis._roots = this._buildTree( geo, options );\r\n\r\n\r\n\t}\r\n\r\n\t/* Private Functions */\r\n\r\n\t_ensureIndex( geo ) {\r\n\r\n\t\tif ( ! geo.index ) {\r\n\r\n\t\t\tconst triCount = geo.attributes.position.count / 3;\r\n\t\t\tconst indexCount = triCount * 3;\r\n\t\t\tconst index = new ( triCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\t\t\tgeo.setIndex( new THREE.BufferAttribute( index, 1 ) );\r\n\r\n\t\t\tfor ( let i = 0; i < indexCount; i ++ ) {\r\n\r\n\t\t\t\tindex[ i ] = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Computes the set of { offset, count } ranges which need independent BVH roots. Each\r\n\t// region in the geometry index that belongs to a different set of material groups requires\r\n\t// a separate BVH root, so that triangles indices belonging to one group never get swapped\r\n\t// with triangle indices belongs to another group. For example, if the groups were like this:\r\n\t//\r\n\t// [-------------------------------------------------------------]\r\n\t// |__________________|\r\n\t//   g0 = [0, 20]  |______________________||_____________________|\r\n\t//                      g1 = [16, 40]           g2 = [41, 60]\r\n\t//\r\n\t// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\r\n\t//\r\n\t_getRootIndexRanges( geo ) {\r\n\r\n\t\tif ( ! geo.groups || ! geo.groups.length ) {\r\n\r\n\t\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\r\n\r\n\t\t}\r\n\r\n\t\tconst ranges = [];\r\n\t\tconst rangeBoundaries = new Set();\r\n\t\tfor ( const group of geo.groups ) {\r\n\r\n\t\t\trangeBoundaries.add( group.start );\r\n\t\t\trangeBoundaries.add( group.start + group.count );\r\n\r\n\t\t}\r\n\r\n\t\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\r\n\t\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\r\n\t\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\r\n\r\n\t\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\r\n\t\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\r\n\r\n\t\t}\r\n\t\treturn ranges;\r\n\r\n\t}\r\n\r\n\t_buildTree( geo, options ) {\r\n\r\n\t\tthis._ensureIndex( geo );\r\n\r\n\t\tconst ctx = new BVHConstructionContext( geo, options );\r\n\t\tlet reachedMaxDepth = false;\r\n\r\n\t\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\r\n\t\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\r\n\t\tconst splitNode = ( node, offset, count, depth = 0 ) => {\r\n\r\n\t\t\tif ( depth >= options.maxDepth ) {\r\n\r\n\t\t\t\treachedMaxDepth = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// early out if we've met our capacity\r\n\t\t\tif ( count <= options.maxLeafTris || depth >= options.maxDepth ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Find where to split the volume\r\n\t\t\tconst split = ctx.getOptimalSplit( node.boundingData, offset, count, options.strategy );\r\n\t\t\tif ( split.axis === - 1 ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst splitOffset = ctx.partition( offset, count, split );\r\n\r\n\t\t\t// create the two new child nodes\r\n\t\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\r\n\r\n\t\t\t\tnode.offset = offset;\r\n\t\t\t\tnode.count = count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode.splitAxis = split.axis;\r\n\r\n\t\t\t\t// create the left child and compute its bounding box\r\n\t\t\t\tconst left = node.left = new MeshBVHNode();\r\n\t\t\t\tconst lstart = offset, lcount = splitOffset - offset;\r\n\t\t\t\tleft.boundingData = ctx.getBounds( lstart, lcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( left, lstart, lcount, depth + 1 );\r\n\r\n\t\t\t\t// repeat for right\r\n\t\t\t\tconst right = node.right = new MeshBVHNode();\r\n\t\t\t\tconst rstart = splitOffset, rcount = count - lcount;\r\n\t\t\t\tright.boundingData = ctx.getBounds( rstart, rcount, new Float32Array( 6 ) );\r\n\t\t\t\tsplitNode( right, rstart, rcount, depth + 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\r\n\t\t};\r\n\r\n\t\tconst roots = [];\r\n\t\tconst ranges = this._getRootIndexRanges( geo );\r\n\r\n\t\tfor ( let range of ranges ) {\r\n\r\n\t\t\tconst root = new MeshBVHNode();\r\n\t\t\troot.boundingData = ctx.getBounds( range.offset, range.count, new Float32Array( 6 ) );\r\n\t\t\tsplitNode( root, range.offset, range.count );\r\n\t\t\troots.push( root );\r\n\r\n\t\t\tif ( reachedMaxDepth && options.verbose ) {\r\n\r\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ options.maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\r\n\t\t\t\tconsole.warn( this, geo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn roots;\r\n\r\n\t}\r\n\r\n\traycast( mesh, raycaster, ray, intersects ) {\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\troot.raycast( mesh, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycastFirst( mesh, raycaster, ray ) {\r\n\r\n\t\tlet closestResult = null;\r\n\r\n\t\tfor ( const root of this._roots ) {\r\n\r\n\t\t\tconst result = root.raycastFirst( mesh, raycaster, ray );\r\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\r\n\r\n\t\t\t\tclosestResult = result;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn closestResult;\r\n\r\n\t}\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { arrayToBox } from './BoundsUtilities.js';\r\n\r\nconst wiremat = new THREE.LineBasicMaterial( { color: 0x00FF88, transparent: true, opacity: 0.3 } );\r\nconst boxGeom = new THREE.Box3Helper().geometry;\r\nlet boundingBox = new THREE.Box3();\r\n\r\nclass MeshBVHVisualizer extends THREE.Object3D {\r\n\r\n\tconstructor( mesh, depth = 10 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.depth = depth;\r\n\t\tthis._oldDepth = - 1;\r\n\t\tthis._mesh = mesh;\r\n\t\tthis._boundsTree = null;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tif ( this._mesh.geometry.boundsTree !== this._boundsTree || this._oldDepth !== this.depth ) {\r\n\r\n\t\t\tthis._oldDepth = this.depth;\r\n\t\t\tthis._boundsTree = this._mesh.geometry.boundsTree;\r\n\r\n\t\t\tlet requiredChildren = 0;\r\n\t\t\tif ( this._boundsTree ) {\r\n\r\n\t\t\t\tconst recurse = ( n, d ) => {\r\n\r\n\t\t\t\t\tlet isLeaf = 'count' in n;\r\n\r\n\t\t\t\t\tif ( d === this.depth ) return;\r\n\r\n\t\t\t\t\tif ( d === this.depth - 1 || isLeaf ) {\r\n\r\n\t\t\t\t\t\tlet m = requiredChildren < this.children.length ? this.children[ requiredChildren ] : null;\r\n\t\t\t\t\t\tif ( ! m ) {\r\n\r\n\t\t\t\t\t\t\tm = new THREE.LineSegments( boxGeom, wiremat );\r\n\t\t\t\t\t\t\tm.raycast = () => [];\r\n\t\t\t\t\t\t\tthis.add( m );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequiredChildren ++;\r\n\t\t\t\t\t\tarrayToBox( n.boundingData, boundingBox );\r\n\t\t\t\t\t\tboundingBox.getCenter( m.position );\r\n\t\t\t\t\t\tm.scale.subVectors( boundingBox.max, boundingBox.min ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! isLeaf ) {\r\n\r\n\t\t\t\t\t\trecurse( n.left, d + 1 );\r\n\t\t\t\t\t\trecurse( n.right, d + 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\trecurse( this._boundsTree._root, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( this.children.length > requiredChildren ) this.remove( this.children.pop() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( this._mesh.position );\r\n\t\tthis.rotation.copy( this._mesh.rotation );\r\n\t\tthis.scale.copy( this._mesh.scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshBVHVisualizer;\r\n","import * as THREE from 'three';\r\nimport MeshBVH from './MeshBVH.js';\r\nimport Visualizer from './MeshBVHVisualizer.js';\r\nimport { CENTER, AVERAGE, SAH } from './Constants.js';\r\n\r\nconst ray = new THREE.Ray();\r\nconst tmpInverseMatrix = new THREE.Matrix4();\r\nconst origMeshRaycastFunc = THREE.Mesh.prototype.raycast;\r\n\r\nfunction acceleratedRaycast( raycaster, intersects ) {\r\n\r\n\tif ( this.geometry.boundsTree ) {\r\n\r\n\t\tif ( this.material === undefined ) return;\r\n\r\n\t\ttmpInverseMatrix.getInverse( this.matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\r\n\r\n\t\tif ( raycaster.firstHitOnly === true ) {\r\n\r\n\t\t\tconst res = this.geometry.boundsTree.raycastFirst( this, raycaster, ray );\r\n\t\t\tif ( res ) intersects.push( res );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.geometry.boundsTree.raycast( this, raycaster, ray, intersects );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction computeBoundsTree( options ) {\r\n\r\n\tthis.boundsTree = new MeshBVH( this, options );\r\n\treturn this.boundsTree;\r\n\r\n}\r\n\r\nfunction disposeBoundsTree() {\r\n\r\n\tthis.boundsTree = null;\r\n\r\n}\r\n\r\nexport {\r\n\tMeshBVH, Visualizer,\r\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\r\n\tCENTER, AVERAGE, SAH\r\n};\r\n"],"names":["Vector3","Vector2","Triangle","BackSide","DoubleSide","Face3","THREE.Box3","THREE.Vector3","xyzFields","THREE.BufferAttribute","THREE.LineBasicMaterial","THREE.Box3Helper","boundingBox","THREE.Object3D","THREE.LineSegments","THREE.Ray","THREE.Matrix4","THREE.Mesh"],"mappings":"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"}